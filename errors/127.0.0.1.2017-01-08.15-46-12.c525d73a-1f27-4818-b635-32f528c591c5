(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object has no attribute '__getitem__'"
p3
sS'layer'
p4
S'/home/ayush/web2py/applications/DineWithMe/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n#@auth.requires_login()\ndef profile():\n    pr = db(db.profile.id == auth.user_id).select() #profilerow\n    profileyes = False\n    if len(pr) >0:\n        profileyes = True\n        pr = pr[0]\n        pinterest = db(db.interests.userid == auth.user_id and db.interests.iid == db.interestlist.id).select(db.interestlist.name)\n        print pinterest\n    profileForm = SQLFORM(db.profile).process()\n    return locals()\n\ndef interest0():\n    options=[  str(x) for x in range(10)]\n    #https://groups.google.com/forum/#!topic/web2py/FG1CZJ9X-j8\n    form=FORM(SELECT(*options,_name=\'test\',_multiple=\'multiple\'),INPUT (_type=\'submit\', url=\'\'))\n    if form.accepts(request,session):\n        print request.vars\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return dict(form=form)\n\ndef interest():\n    oldInt = db(db.interests.userid == auth.user_id and db.interests.iid == db.interestlist.id).select(db.interestlist.name)\n    iis = db(db.interestlist).select()\n    rev = {}\n    oldids = []\n    for i in iis:\n        rev[i[\'name\']] = i[\'id\']\n        oldids.append(i[\'id\'])\n    options=[  str(x[\'name\']) for x in iis]\n    # todo : http://stackoverflow.com/questions/19999852/how-to-preselect-options-in-select-helper-in-web2py\n    # pre select old interest\n    form=FORM(SELECT(options,_name=\'interestform\',_multiple=\'multiple\',_size=len(iis)),INPUT (_type=\'submit\'))\n    if form.accepts(request,session):\n        print request.vars.interestform\n        response.flash = \'form accepted\'\n        for j in request.vars.interestform:\n#            try:\n                oldInt2 = db(db.interests.userid == auth.user_id and db.interests.iid == db.interestlist.id).select(db.interestlist.name)\n                oldIntList = []\n                for i in oldInt2:\n                    oldIntList.append(i[\'name\'])\n                if j not in oldIntList:\n                    db.interests.insert(userid=auth.user_id, iid=rev[j])\n#                else: print \'duplicate entry\'\n#            except:\n#                print \'exception while adding interest, possible dup\'\n#                pass\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return locals()\n    #print iis[0]\n    #form = SQLFORM(db.interests).process()\n    #return locals()\n\n\n    \ndef add_interest():\n    print request.args\n    print request.vars\n    return locals()\n\n\ndef find():\n    print request.vars # time , place, foodtype\n    \n    import datetime \n    print request.now, datetime.datetime.now()\n    print datetime.datetime.now() + datetime.timedelta(minutes=30)\n    today = datetime.date.today()\n    inputtime = request.vars.time.split(\':\')\n    hh, mm = int(inputtime[0]), int(inputtime[1])\n    searchTime = datetime.time(hh, mm)\n    print searchTime\n    finalSearchTime = datetime.datetime.combine(today, searchTime)\n    qexpy = finalSearchTime + datetime.timedelta(minutes=45)\n    q = finalSearchTime\n    print finalSearchTime\n    print qexpy\n    oldreqs = db(db.requests.rtime < q and db.requests.expiry > q ).select()\n    if(len(oldreqs) == 0):\n        print \'no request, inserting in request and chat\'\n        rid = db.requests.insert(user_id=auth.user_id, place = request.vars.place, rtime = q, expiry = qexpy, foodtype=request.vars.foodtype)\n        rid = int(rid[0][\'id\'])\n        db.chat.insert(rid=rid, user_id = auth.user_id)\n        return "<div style=\'text-align:center;\'>No current request, We will notify you shortly</div>"\n    else:\n        print oldreqs[0][\'place\']\n        print \' got output\'\n        one = oldreqs[0]\n        print one\n        s=""\n        for one in oldreqs:\n            cnt = len( db( (db.requests.id == one[\'id\']) &  (db.chat.rid == db.requests.id) ).select(db.chat.user_id) )\n            s += \'<div style="border:3px solid green; width: 310px; margin: 12px; margin-left: 4%; height: 80px; float:left; border-radius: 8px; text-align:center; padding-top:2%" onclick="moredetails()"> <p> \' + str(cnt) + \' people going to \' + one[\'place\']  + \' at \' +  str(one[\'rtime\'])[11:16]  + \'</p></div>\'\n        print s\n        #s="<p> " +  oldreqs[0][\'place\']+" </o>"\n        return s\n        #return "<div>Output" + oldreqs[0][\'id\'] +"</div>"\n\ndef search():\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(find)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ayush/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ayush/web2py/applications/DineWithMe/controllers/default.py", line 170, in <module>\n  File "/home/ayush/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ayush/web2py/applications/DineWithMe/controllers/default.py", line 112, in find\n    rid = int(rid[0][\'id\'])\nTypeError: \'NoneType\' object has no attribute \'__getitem__\'\n'
p11
s.